#ifndef POLYNOMIAL_H
#define POLYNOMIAL_H

#include <vector>
#include <NTL/ZZ.h>
#include <NTL/ZZ_pEX.h>
#include <map>
#include <algorithm>
#include <sstream>
#include "../settings.h"
#include "../cuda/operators.h"
#include "../cuda/cuda_bn.h"
#include "../logging/logging.h"

NTL_CLIENT



// 29 bits
#if CRTPRIMESIZE == 29
  const uint32_t PRIMES_BUCKET[] = {536870909, 536870879, 536870869, 536870849, 536870839, 536870837, 536870819, 536870813, 536870791, 536870779, 536870767, 536870743, 536870729, 536870723, 536870717, 536870701, 536870683, 536870657, 536870641, 536870627, 536870611, 536870603, 536870599, 536870573, 536870569, 536870563, 536870561, 536870513, 536870501, 536870497, 536870473, 536870401, 536870363, 536870317, 536870303, 536870297, 536870273, 536870267, 536870239, 536870233, 536870219, 536870171, 536870167, 536870153, 536870123, 536870063, 536870057, 536870041, 536870027, 536869999, 536869951, 536869943, 536869937, 536869919, 536869901, 536869891, 536869831, 536869829, 536869793, 536869787, 536869777, 536869771, 536869769, 536869747, 536869693, 536869679, 536869651, 536869637, 536869633, 536869631, 536869607, 536869603, 536869589, 536869583, 536869573, 536869559, 536869549, 536869523, 536869483, 536869471, 536869447, 536869423, 536869409, 536869387, 536869331, 536869283, 536869247, 536869217, 536869189, 536869159, 536869153, 536869117, 536869097, 536869043, 536868979, 536868977, 536868973, 536868961, 536868953, 536868901}; //                                                                                                                                                                                                                                                                                                             //
#else
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                                                                                                                                                                                                                                                                             //
  // 15 bits
  #if CRTPRIMESIZE == 15
   const uint32_t PRIMES_BUCKET[] = {32749, 32719, 32717, 32713, 32707, 32693, 32687, 32653, 32647, 32633, 32621, 32611, 32609, 32603, 32587, 32579, 32573, 32569, 32563, 32561, 32537, 32533, 32531, 32507, 32503, 32497, 32491, 32479, 32467, 32443, 32441, 32429, 32423, 32413, 32411, 32401, 32381, 32377, 32371, 32369, 32363, 32359, 32353, 32341, 32327, 32323, 32321, 32309, 32303, 32299, 32297, 32261, 32257, 32251, 32237, 32233, 32213, 32203, 32191, 32189, 32183, 32173, 32159, 32143, 32141, 32119, 32117, 32099, 32089, 32083, 32077, 32069, 32063, 32059, 32057, 32051, 32029, 32027, 32009, 32003, 31991, 31981, 31973, 31963, 31957, 31907, 31891, 31883, 31873, 31859, 31849, 31847, 31817, 31799, 31793, 31771, 31769, 31751, 31741, 31729, 31727, 31723, 31721, 31699, 31687, 31667, 31663, 31657, 31649, 31643, 31627, 31607, 31601, 31583, 31573, 31567, 31547, 31543, 31541, 31531, 31517, 31513, 31511, 31489, 31481, 31477, 31469, 31397, 31393, 31391, 31387, 31379, 31357, 31337, 31333, 31327, 31321, 31319, 31307, 31277, 31271, 31267, 31259, 31253, 31249, 31247, 31237, 31231, 31223, 31219, 31193, 31189, 31183, 31181, 31177, 31159, 31153, 31151, 31147, 31139, 31123, 31121, 31091, 31081, 31079, 31069, 31063, 31051, 31039, 31033, 31019, 31013, 30983, 30977, 30971, 30949, 30941, 30937, 30931, 30911, 30893, 30881, 30871, 30869, 30859, 30853, 30851, 30841, 30839, 30829, 30817, 30809, 30803, 30781, 30773, 30763, 30757, 30727, 30713, 30707}; // //
  #else

    // 10 bits
    #if CRTPRIMESIZE == 10
     const uint32_t PRIMES_BUCKET[] = {1021, 1019, 1013, 1009, 997, 991, 983, 977, 971, 967, 953, 947, 941, 937, 929, 919, 911, 907, 887, 883, 881, 877, 863, 859, 857, 853, 839, 829, 827, 823, 821, 811, 809, 797, 787, 773, 769, 761, 757, 751, 743, 739, 733, 727, 719, 709, 701, 691, 683, 677, 673, 661, 659, 653, 647, 643, 641, 631, 619, 617, 613, 607, 601, 599, 593, 587, 577, 571, 569, 563, 557, 547, 541, 523, 521}; ///
    #else
      #if CRTPRIMESIZE == 9
        const uint32_t PRIMES_BUCKET[] = {67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509};
      #endif
    #endif
  #endif
#endif
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Stores the polynomial degree that should be used
extern int OP_DEGREE;

// Stores CRT primes
extern std::vector<cuyasheint_t> CRTPrimes;
extern ZZ CRTProduct;
extern std::vector<ZZ> CRTMpi;
extern std::vector<cuyasheint_t> CRTInvMpi;

// Three possible states:
// 
// 	* HOSTSTATE: data is updated on the host and stored in "coefs"
// 	* CRTSTATE: data is updated on the GPU and the residues are stored in "d_coefs"
// 	* TRANSSTATE: data is updated on the GPU and the transformed resides are stored in "d_coefs"
enum states {HOSTSTATE, CRTSTATE, TRANSSTATE};

struct polynomial {
	std::vector<ZZ> coefs;
	cuyasheint_t *d_coefs = NULL;
	int status = HOSTSTATE;
	bn_t *d_bn_coefs = NULL;
	#ifdef CUFFTMUL_TRANSFORM
	Complex *d_coefs_transf = NULL;
	#endif
} typedef poly_t;

/**
 * [poly_init description]
 * @param a [description]
 */
void poly_init(poly_t *a);

/**
 * [poly_copy_to_device description]
 * @param a [description]
 */
void poly_copy_to_device(poly_t *a);
/**
 * [poly_copy_to_host description]
 * @param a [description]
 */
void poly_copy_to_host(poly_t *a);

/**
 * [poly_demote description]
 * @param a [description]
 */
void poly_demote(poly_t *a);
/**
 * [poly_elevate description]
 * @param a [description]
 */
void poly_elevate(poly_t *a);

/**
 * [poly_crt description]
 * @param a [description]
 */
void poly_crt(poly_t *a);
/**
 * [poly_icrt description]
 * @param a [description]
 */
void poly_icrt(poly_t *a);

/**
 * returns the polynomial degree
 * @param  a [description]
 * @return   [description]
 */
int poly_get_deg(poly_t *a);

/**
 * polynomial addition
 * @param c [output]
 * @param a [input]
 * @param b [input]
 */
void poly_add(poly_t *c, poly_t *a, poly_t *b);

/**
 * polynomial multiplication
 * @param c [output]
 * @param a [input]
 * @param b [input]
 */

void poly_mul(poly_t *c, poly_t *a, poly_t *b);

/**
 * polynomial addition with an integer
 * @param c [output]
 * @param a [input]
 * @param b [input]
 */
void poly_integer_add(poly_t *c, poly_t *a, cuyasheint_t b);

/**
 * polynomial multiplication with an integer
 * @param c [output]
 * @param a [input]
 * @param b [input]
 */

void poly_integer_mul(poly_t *c, poly_t *a, cuyasheint_t b);

/**
 * [poly_biginteger_mul description]
 * @param c [description]
 * @param a [description]
 * @param b [description]
 */
void poly_biginteger_mul(poly_t *c, poly_t *a, bn_t b);

/**
 * [poly_biginteger_mul description]
 * @param c [description]
 * @param a [description]
 * @param b [description]
 */
void poly_biginteger_mul(poly_t *c, poly_t *a, ZZ b);

/**
 * [poly_reduce description]
 * @param f    [description]
 * @param nphi x^{nphi} - 1
 * @param nq   2^{nq} - 1
 */
void poly_reduce(poly_t *f, int nphi, int nq);

/**
 * computes the polynomial inverse in R_q
 * @param fInv [description]
 * @param f    [description]
 * @param nphi x^{nphi} - 1
 * @param nq   2^{nq} - 1
 */
void poly_invmod(poly_t *fInv, poly_t *f, int nphi, int nq);

/**
 * print a polynomial
 * @param a [description]
 */
std::string poly_print(poly_t *a);

/**
 * generates a set of primes for CRT
 * @param q      [description]
 * @param degree [description]
 */
void gen_crt_primes(ZZ q,cuyasheint_t degree);

/**
 * convert a ZZ to bn_t
 * @param b [description]
 * @param a [description]
 */
void get_words(bn_t *b,ZZ a);

/**
 * convert a bn_t to ZZ
 * @param  a [description]
 * @return   [description]
 */
ZZ get_ZZ(bn_t *a);

void get_words_host(bn_t *b,ZZ a);

/**
 * computes the reciprocal of q
 * @param  q [description]
 * @return   [description]
 */
bn_t get_reciprocal(ZZ q);

void compute_reciprocal(ZZ q);

bn_t get_reciprocal(bn_t q);

/**
 * [poly_set_coeff description]
 * @param a [description]
 * @param index [description]
 * @param c [description]
 */
void poly_set_coeff(poly_t *a, int index, ZZ c);

/**
 * [poly_get_coeff description]
 * @param a     [description]
 * @param index [description]
 */
ZZ poly_get_coeff(poly_t *a, int index);


void poly_demote(poly_t *a);
void poly_elevate(poly_t *a);

void poly_set_nth_cyclotomic(poly_t *a, int n);
void poly_clear(poly_t *a);
#endif